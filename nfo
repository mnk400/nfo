#!/bin/bash

# Created by Manik
# on Aug 6, 2020

# Setting path for config and artwork
confg="/home/${USER}/.config/nfo/config.conf"
# confg="config.conf"
artwork="/home/${USER}/.config/nfo/art.sh"

if [ -f $confg ]; then
	. $confg
else
	echo "Config file not found"
	exit
fi

if [ -f $artwork ]; then
	source $artwork
else
	echo "Artwork file not found"
	exit
fi

# Define colours
RED='\033[0;31m'
MAGENTA='\033[0;35m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Text styling
if [ "$ascii_bold" == "True" ]; then
	bold=$(tput bold)
else
	bold=$()
fi

normal=$(tput sgr0)

if [ $TINT == 'Magenta' ]; then
		tint_shade=$MAGENTA
elif [ $TINT == 'Red' ]; then
		tint_shade=$RED
elif [ $TINT == 'Green' ]; then
		tint_shade=$GREEN
elif [ $TINT == 'Yellow' ]; then
		tint_shade=$YELLOW
elif [ $TINT == 'Blue' ]; then
		tint_shade=$BLUE
elif [ $TINT == 'Cyan' ]; then
		tint_shade=$CYAN
else
		tint_shade=$NC
fi

function os {
	os_t=$(uname -o)
	if [ $os_t == 'GNU/Linux' ]; then
		if [ -f /etc/os-release ]; then
			. /etc/os-release
			res="$NAME $VERSION_ID"
		else
			res="Can't read /etc/os-release"
		fi
	else
		res="OS family not supported yet"
	fi
	echo -e "${tint_shade}${bold}OS:${normal}${NC}		$res $(wsl_check)"
}

function kernel {
	ver=$(uname -r)
	echo -e "${tint_shade}${bold}Linux:${normal}${NC}		$ver"
}

function total_memory {
	totalk=$(awk '/^MemTotal:/{print $2}' /proc/meminfo)
	var=1024
	echo -e "${tint_shade}${bold}Memory:${normal}${NC}		$((totalk/var)) MiB"
}

function cpu {
	res=$(lscpu | grep "Model name:" | sed -r 's/Model name:\s{1,}//g')
	echo -e "${tint_shade}${bold}CPU:${normal}${NC}		$res"
}

function wsl_check {
	if grep -q microsoft /proc/version; then
	echo "(WSL)"
	fi
}

function current_shell {
	res=$($SHELL --version | cut -d' ' -f1-2)
	echo -e "${tint_shade}${bold}Shell:${normal}${NC}		$res"
}

function up_time {
	res=$(uptime -p | cut -d " " -f2- )
	echo -e "${tint_shade}${bold}Uptime:${normal}${NC}		$res"
}

function totalpackages {
	res=$(dpkg-query -f '${binary:Package}\n' -W | wc -l)
	echo -e "${tint_shade}${bold}Packages:${normal}${NC}	$res"
}

function resolution {
	res=$(timeout 2s bash -c "xdpyinfo | grep dimensions | sed -r 's/^[^0-9]*([0-9]+x[0-9]+).*$/\1/'")
	if [ -z "$res" ]; then
    	res="Couldn't find out"
	fi

	echo -e "${tint_shade}${bold}Resolution:${normal}${NC} 	$res"
}

function art {
	if [ $ART == 'nfo' ]; then
		printf "$nfo_isometric\n\n"
	elif [ $ART == 'key' ]; then
		printf "$keyboard\n\n"
	elif [ $ART == 'file' ]; then
		printf "$file\n\n"
	elif [ $ART == 'name' ]; then
		printf "$name\n\n"
	elif [ $ART == 'toilet' ]; then
		toilet -f future --gay "$toiet_msg"
	fi
}

function host {
	if [ $toilet_host == 'True' ]; then
		toilet -f future --gay "$USER@$HOSTNAME"
	else
		echo -e "${tint_shade}${bold}"$USER"${NC}""@""${tint_shade}${bold}"$HOSTNAME"${NC}"
	fi
}

function colors {
	echo -e "${RED}▄${NC} ${MAGENTA}▄${NC} ${YELLOW}▄${NC} ${GREEN}▄${NC} ${CYAN}▄${NC} ${BLUE}▄${NC} "
	echo -e "${RED}▀${NC} ${MAGENTA}▀${NC} ${YELLOW}▀${NC} ${GREEN}▀${NC} ${CYAN}▀${NC} ${BLUE}▀${NC} "
}

function nfo {
	echo -e "$($1)"
}

print_out