#!/bin/bash
#
# nfo - A minimal neofetch alternative
# Created by Manik

# Global variables
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly OS="$(uname)"

# Color definitions
RED='\033[0;31m'
MAGENTA='\033[0;35m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configuration variables
CONFIG_FILE=""
ARTWORK_FILE=""
TINT_SHADE=""
BOLD=""
NORMAL=""

# Enable strict error handling after variable declarations
set -euo pipefail

# Initialize configuration
init_config() {
    local config_dir artwork_dir
    
    if [[ "${1:-}" == "--dev" ]]; then
        echo "Development mode enabled"
        config_dir="$SCRIPT_DIR"
        artwork_dir="$SCRIPT_DIR"
    else
        config_dir="$HOME/.config/nfo"
        artwork_dir="$HOME/.config/nfo"
    fi
    
    CONFIG_FILE="$config_dir/config.conf"
    ARTWORK_FILE="$artwork_dir/art.sh"
    
    # Validate and source config files
    [[ -f "$CONFIG_FILE" ]] || { echo "Error: Config file not found at $CONFIG_FILE" >&2; exit 1; }
    [[ -f "$ARTWORK_FILE" ]] || { echo "Error: Artwork file not found at $ARTWORK_FILE" >&2; exit 1; }
    
    # Temporarily disable strict error handling for sourcing files
    set +e
    source "$CONFIG_FILE"
    source "$ARTWORK_FILE"
    set -e
}

# Set up text styling
setup_styling() {
    NORMAL="$(tput sgr0 2>/dev/null || echo '')"
    
    if [[ "${ascii_bold:-}" == "True" ]]; then
        BOLD="$(tput bold 2>/dev/null || echo '')"
    else
        BOLD=""
    fi
    
    # Tint colors
    case "${TINT:-}" in
        Magenta) TINT_SHADE="$MAGENTA" ;;
        Red)     TINT_SHADE="$RED" ;;
        Green)   TINT_SHADE="$GREEN" ;;
        Yellow)  TINT_SHADE="$YELLOW" ;;
        Blue)    TINT_SHADE="$BLUE" ;;
        Cyan)    TINT_SHADE="$CYAN" ;;
        *)       TINT_SHADE="$NC" ;;
    esac
}

# Utility function for formatted output
print_info() {
    local label="$1"
    local value="$2"
    local spacing="${3:-\t\t}"
    
    echo -e "${TINT_SHADE}${BOLD}${label}:${NORMAL}${NC}${spacing}${value}"
}

# System information functions
get_os_info() {
    local result
    
    case "$OS" in
        Linux)
            if [[ -f /etc/os-release ]]; then
                source /etc/os-release
                result="$NAME ${VERSION_ID:-}"
            else
                result="Linux (unknown distribution)"
            fi
            ;;
        Darwin)
            local version
            version="$(sw_vers -productVersion 2>/dev/null || echo 'unknown')"
            result="macOS $version"
            ;;
        *)
            result="$OS (unsupported)"
            ;;
    esac
    
    # Check for WSL
    if [[ "$OS" == "Linux" ]] && grep -q microsoft /proc/version 2>/dev/null; then
        result="$result (WSL)"
    fi
    
    print_info "OS" "$result"
}

get_kernel_info() {
    local version
    version="$(uname -r)"
    
    case "$OS" in
        Darwin) version="Darwin Kernel $version" ;;
        Linux)  version="Linux $version" ;;
    esac
    
    print_info "Kernel" "$version"
}

get_memory_info() {
    local total_mb
    
    case "$OS" in
        Linux)
            if [[ -f /proc/meminfo ]]; then
                total_mb="$(awk '/^MemTotal:/ {print int($2/1024)}' /proc/meminfo)"
            else
                total_mb="unknown"
            fi
            ;;
        Darwin)
            local total_gb
            total_gb="$(system_profiler SPHardwareDataType 2>/dev/null | 
                       awk '/Memory:/ {print $2}' | head -1)"
            if [[ -n "$total_gb" ]]; then
                total_mb="$((total_gb * 1024))"
            else
                total_mb="unknown"
            fi
            ;;
        *)
            total_mb="unsupported"
            ;;
    esac
    
    print_info "Memory" "${total_mb} MiB"
}

get_cpu_info() {
    local cpu_info
    
    case "$OS" in
        Linux)
            cpu_info="$(lscpu 2>/dev/null | awk -F': ' '/Model name/ {print $2; exit}' | sed 's/^[[:space:]]*//')"
            [[ -z "$cpu_info" ]] && cpu_info="$(cat /proc/cpuinfo 2>/dev/null | awk -F': ' '/model name/ {print $2; exit}' | sed 's/^[[:space:]]*//')"
            ;;
        Darwin)
            cpu_info="$(sysctl -n machdep.cpu.brand_string 2>/dev/null || echo 'unknown')"
            ;;
        *)
            cpu_info="unsupported"
            ;;
    esac
    
    print_info "CPU" "${cpu_info:-unknown}"
}

get_shell_info() {
    local shell_info
    shell_info="$("$SHELL" --version 2>/dev/null | head -1 | cut -d',' -f1 | awk '{print $1, $2}')"
    print_info "Shell" "${shell_info:-$SHELL}"
}

get_uptime_info() {
    local uptime_str
    
    case "$OS" in
        Linux)
            uptime_str="$(uptime | awk -F'( |,|:)+' '
                {d=h=m=0; 
                 if ($7=="min") m=$6; 
                 else if ($7~/^day/) {d=$6;h=$8;m=$9} 
                 else {h=$6;m=$7}} 
                {printf "%d days, %d hours, %d minutes", d, h, m}')"
            ;;
        Darwin)
            uptime_str="$(uptime | awk -F'( |,|:)+' '
                {d=h=m=0; 
                 if ($5=="mins") m=$4; 
                 else if ($5~/^day/) {d=$4;h=$6;m=$7} 
                 else {h=$4;m=$5}} 
                {printf "%d days, %d hours, %d minutes", d, h, m}')"
            ;;
        *)
            uptime_str="unsupported"
            ;;
    esac
    
    print_info "Uptime" "$uptime_str"
}

get_package_count() {
    local count
    
    case "$OS" in
        Linux)
            if command -v dpkg-query >/dev/null 2>&1; then
                count="$(dpkg-query -f '${binary:Package}\n' -W 2>/dev/null | wc -l)"
            elif command -v rpm >/dev/null 2>&1; then
                count="$(rpm -qa 2>/dev/null | wc -l)"
            elif command -v pacman >/dev/null 2>&1; then
                count="$(pacman -Q 2>/dev/null | wc -l)"
            else
                count="unknown"
            fi
            ;;
        Darwin)
            if command -v brew >/dev/null 2>&1; then
                count="$(brew list --formula 2>/dev/null | wc -l | tr -d ' ')"
            else
                count="0 (brew not installed)"
            fi
            ;;
        *)
            count="unsupported"
            ;;
    esac
    print_info "Packages" "$count" "\t"
}

get_resolution_info() {
    local resolution
    
    case "$OS" in
        Linux)
            if command -v xdpyinfo >/dev/null 2>&1; then
                resolution="$(timeout 2s xdpyinfo 2>/dev/null | 
                             awk '/dimensions:/ {print $2; exit}')"
            fi
            [[ -z "$resolution" ]] && resolution="unknown"
            ;;
        Darwin)
            resolution="$(system_profiler SPDisplaysDataType 2>/dev/null | 
                         awk '/Resolution:/ {print $2 " x " $4; exit}')"
            [[ -z "$resolution" ]] && resolution="unknown"
            ;;
        *)
            resolution="unsupported"
            ;;
    esac
    
    print_info "Resolution" "$resolution" " \t"
}

# Display functions
show_art() {
    case "${ART:-nfo}" in
        nfo)     printf "%s\n\n" "${nfo_isometric:-}" ;;
        key)     printf "%s\n\n" "${keyboard:-}" ;;
        file)    printf "%s\n\n" "${file:-}" ;;
        name)    printf "%s\n\n" "${name:-}" ;;
        toilet)  
            if command -v toilet >/dev/null 2>&1; then
                toilet -f future --gay "${toiet_msg:-nfo}"
            else
                echo "toilet command not found"
            fi
            ;;
        *)       echo "Unknown art type: ${ART}" ;;
    esac
}

show_host() {
    if [[ "${toilet_host:-}" == "True" ]] && command -v toilet >/dev/null 2>&1; then
        toilet -f future --gay "${USER}@${HOSTNAME}"
    else
        echo -e "${TINT_SHADE}${BOLD}${USER}${NC}@${TINT_SHADE}${BOLD}${HOSTNAME}${NC}"
    fi
}

show_colors() {
    echo -e "${RED}▄${NC} ${MAGENTA}▄${NC} ${YELLOW}▄${NC} ${GREEN}▄${NC} ${CYAN}▄${NC} ${BLUE}▄${NC}"
    echo -e "${RED}▀${NC} ${MAGENTA}▀${NC} ${YELLOW}▀${NC} ${GREEN}▀${NC} ${CYAN}▀${NC} ${BLUE}▀${NC}"
}

# Main execution function
nfo() {
    local func_name="$1"
    
    case "$func_name" in
        art)         show_art ;;
        host)        show_host ;;
        colors)      show_colors ;;
        os)          get_os_info ;;
        kernel)      get_kernel_info ;;
        resolution)  get_resolution_info ;;
        up_time)     get_uptime_info ;;
        current_shell) get_shell_info ;;
        totalpackages) get_package_count ;;
        total_memory) get_memory_info ;;
        cpu)         get_cpu_info ;;
        *)           echo "Unknown function: $func_name" >&2 ;;
    esac
}

# Main execution
main() {
    init_config "$@"
    setup_styling
    
    # Execute the print_out function from config
    if declare -f print_out >/dev/null; then
        print_out
    else
        echo "Error: print_out function not found in config" >&2
        exit 1
    fi
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
